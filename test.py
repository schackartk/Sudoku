#!/usr/bin/env python3
"""tests for grph.py"""

from subprocess import getstatusoutput
import os
import random
import re
import string
import sys
import sudoku

prg = './sudoku.py'


# --------------------------------------------------
def test_usage():
    """usage"""
    (ret1, out1) = getstatusoutput(prg)
    assert ret1 > 0
    assert re.match("usage", out1, re.IGNORECASE)


# --------------------------------------------------
def test_bad_difficulty():
    """Test response to invalid difficulty"""
    bad_d = random.choice(
        ['a', 'b', 'c', 'd', 'f', 'g', 'i', 'j', 'k', 'l', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',
         'z'])
    rv, out = getstatusoutput('{} -d {}'.format(prg, bad_d))
    assert rv > 0
    assert out == '--difficulty "{}" must be (E)asy, (M)edium, or (H)ard'.format(bad_d)


# --------------------------------------------------
def test_make_board():
    """Ttest the make_board function"""
    assert sudoku.make_board('E') == [[' ', ' ', ' ', 'b', 'f', ' ', 'g', ' ', 'a'],
                                      ['f', 'h', ' ', ' ', 'g', ' ', ' ', 'i', ' '],
                                      ['a', 'i', ' ', ' ', ' ', 'd', 'e', ' ', ' '],
                                      ['h', 'b', ' ', 'a', ' ', ' ', ' ', 'd', ' '],
                                      [' ', ' ', 'd', 'f', ' ', 'b', 'i', ' ', ' '],
                                      [' ', 'e', ' ', ' ', ' ', 'c', ' ', 'b', 'h'],
                                      [' ', ' ', 'i', 'c', ' ', ' ', ' ', 'g', 'd'],
                                      [' ', 'd', ' ', ' ', ' ', 'e', ' ', 'c', 'f'],
                                      ['g', ' ', 'c', ' ', 'a', 'h', ' ', ' ', ' ']]

    assert sudoku.make_board('M') == [[' ', 'b', ' ', 'f', ' ', 'h', ' ', ' ', ' '],
                                      ['e', 'h', ' ', ' ', ' ', 'i', 'g', ' ', ' '],
                                      [' ', ' ', ' ', ' ', 'd', ' ', ' ', ' ', ' '],
                                      ['c', 'g', ' ', ' ', ' ', ' ', 'e', ' ', ' '],
                                      ['f', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd'],
                                      [' ', ' ', 'h', ' ', ' ', ' ', ' ', 'a', 'c'],
                                      [' ', ' ', ' ', ' ', 'b', ' ', ' ', ' ', ' '],
                                      [' ', ' ', 'i', 'h', ' ', ' ', ' ', 'c', 'f'],
                                      [' ', ' ', ' ', 'c', ' ', 'f', ' ', 'i', ' ']]

    assert sudoku.make_board('H') == [[' ', ' ', ' ', 'f', ' ', ' ', 'd', ' ', ' '],
                                      ['g', ' ', ' ', ' ', ' ', 'c', 'f', ' ', ' '],
                                      [' ', ' ', ' ', ' ', 'i', 'a', ' ', 'h', ' '],
                                      [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                                      [' ', 'e', ' ', 'a', 'h', ' ', ' ', ' ', 'c'],
                                      [' ', ' ', ' ', 'c', ' ', 'f', ' ', 'd', 'e'],
                                      [' ', 'd', ' ', 'b', ' ', ' ', ' ', 'f', ' '],
                                      ['i', ' ', 'c', ' ', ' ', ' ', ' ', ' ', ' '],
                                      [' ', 'b', ' ', ' ', ' ', ' ', 'a', ' ', ' ']]


# --------------------------------------------------
def test_modify_board():
    """Test modify_board function"""
    cells = sudoku.make_board('E')

    changed_cells, immut = sudoku.modify_board(cells, True)
    assert changed_cells == [['1', ' ', '5', ' ', '3', '6', ' ', ' ', ' '],
                             [' ', '8', ' ', ' ', ' ', '7', ' ', '5', '4'],
                             [' ', ' ', '9', '5', ' ', ' ', ' ', '1', '8'],
                             [' ', '7', ' ', ' ', ' ', '5', ' ', '2', '6'],
                             [' ', ' ', '8', '4', ' ', '2', '9', ' ', ' '],
                             ['6', '2', ' ', '3', ' ', ' ', ' ', '8', ' '],
                             ['3', '9', ' ', ' ', ' ', '8', '7', ' ', ' '],
                             ['4', '6', ' ', ' ', '1', ' ', ' ', '9', ' '],
                             [' ', ' ', ' ', '2', '4', ' ', '1', ' ', '3']]

    assert immut == [(0, 0), (0, 2), (0, 4), (0, 5), (1, 1), (1, 5), (1, 7), (1, 8), (2, 2), (2, 3), (2, 7), (2, 8),
                     (3, 1), (3, 5), (3, 7), (3, 8), (4, 2), (4, 3), (4, 5), (4, 6), (5, 0), (5, 1), (5, 3), (5, 7),
                     (6, 0), (6, 1), (6, 5), (6, 6), (7, 0), (7, 1), (7, 4), (7, 7), (8, 3), (8, 4), (8, 6), (8, 8)]


# --------------------------------------------------
def test_print_board(capfd):
    """Test print_board function"""
    cells = sudoku.make_board('E')
    changed_cells, immut = sudoku.modify_board(cells, True)
    sudoku.print_board(changed_cells, immut, [], [], False, True)

    out, err = capfd.readouterr()

    assert out.strip() == """-------------------------------------
| 1 ⁝   ⁝ 5 |   ⁝ 3 ⁝ 6 |   ⁝   ⁝   |
·····································
|   ⁝ 8 ⁝   |   ⁝   ⁝ 7 |   ⁝ 5 ⁝ 4 |
·····································
|   ⁝   ⁝ 9 | 5 ⁝   ⁝   |   ⁝ 1 ⁝ 8 |
-------------------------------------
|   ⁝ 7 ⁝   |   ⁝   ⁝ 5 |   ⁝ 2 ⁝ 6 |
·····································
|   ⁝   ⁝ 8 | 4 ⁝   ⁝ 2 | 9 ⁝   ⁝   |
·····································
| 6 ⁝ 2 ⁝   | 3 ⁝   ⁝   |   ⁝ 8 ⁝   |
-------------------------------------
| 3 ⁝ 9 ⁝   |   ⁝   ⁝ 8 | 7 ⁝   ⁝   |
·····································
| 4 ⁝ 6 ⁝   |   ⁝ 1 ⁝   |   ⁝ 9 ⁝   |
·····································
|   ⁝   ⁝   | 2 ⁝ 4 ⁝   | 1 ⁝   ⁝ 3 |
-------------------------------------"""


# --------------------------------------------------
def test_check_board():
    """Test the check_board function"""
    cells = sudoku.make_board('E')
    changed_cells, immut = sudoku.modify_board(cells, True)
    changed_cells[1][0] = '1'
    changed_cells[1][3] = '1'
    changed_cells[5][5] = '1'

    bad, cannot, won = sudoku.check_board(changed_cells, immut)

    assert bad == {(1, 0), (1, 3)}
    assert cannot == {(1, 0)}
    assert won == False


# ----------------------------------------------------
def test_winning_state():
    """Test if the system can detect a winning board"""
    cells = [[], [], [], [], [], [], [], [], []]
    immut = {}

    cells[0] = ['4', '3', '5', '2', '6', '9', '7', '8', '1']
    cells[1] = ['6', '8', '2', '5', '7', '1', '4', '9', '3']
    cells[2] = ['1', '9', '7', '8', '3', '4', '5', '6', '2']
    cells[3] = ['8', '2', '6', '1', '9', '5', '3', '4', '7']
    cells[4] = ['3', '7', '4', '6', '8', '2', '9', '1', '5']
    cells[5] = ['9', '5', '1', '7', '4', '3', '6', '2', '8']
    cells[6] = ['5', '1', '9', '3', '2', '6', '8', '7', '4']
    cells[7] = ['2', '4', '8', '9', '5', '7', '1', '3', '6']
    cells[8] = ['7', '6', '3', '4', '1', '8', '2', '5', '9']

    bad, cannot, won = sudoku.check_board(cells, immut)

    assert won == True

# -----------------------------------------------------
